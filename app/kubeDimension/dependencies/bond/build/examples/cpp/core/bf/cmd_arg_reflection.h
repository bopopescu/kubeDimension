
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : cmd_arg_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "cmd_arg_types.h"
#include <bond/core/reflection.h>

namespace bf
{
    //
    // Options
    //
    struct Options::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_help_metadata;
        private: static const bond::Metadata s_output_metadata;
        private: static const bond::Metadata s_from_metadata;
        private: static const bond::Metadata s_to_metadata;
        private: static const bond::Metadata s_all_fields_metadata;
        private: static const bond::Metadata s_schema_metadata;
        private: static const bond::Metadata s_file_metadata;

        public: struct var
        {
            // help
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                Options,
                bool,
                &Options::help,
                &s_help_metadata
            > help;
        
            // output
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                Options,
                std::string,
                &Options::output,
                &s_output_metadata
            > output;
        
            // from
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                Options,
                ::bf::Protocol,
                &Options::from,
                &s_from_metadata
            > from;
        
            // to
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::optional_field_modifier,
                Options,
                ::bf::Protocol,
                &Options::to,
                &s_to_metadata
            > to;
        
            // all_fields
            typedef bond::reflection::FieldTemplate<
                4,
                bond::reflection::optional_field_modifier,
                Options,
                bool,
                &Options::all_fields,
                &s_all_fields_metadata
            > all_fields;
        
            // schema
            typedef bond::reflection::FieldTemplate<
                5,
                bond::reflection::optional_field_modifier,
                Options,
                std::string,
                &Options::schema,
                &s_schema_metadata
            > schema;
        
            // file
            typedef bond::reflection::FieldTemplate<
                6,
                bond::reflection::required_field_modifier,
                Options,
                std::string,
                &Options::file,
                &s_file_metadata
            > file;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::file>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::schema>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::all_fields>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::to>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::from>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::output>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::help>::type fields7;

        public: typedef fields7::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("Options", "bf.Options",
                boost::assign::map_list_of<std::string, std::string>
                    ("help", "[options] FILE")
            );
        }
    };
    

    
} // namespace bf
