
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 3.02
//   File : Messages_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x302
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace Message
{
    
    struct Request
    {
        std::string keyword;
        
        Request()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Request(const Request& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Request(Request&& other)
          : keyword(std::move(other.keyword))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Request& operator=(const Request& other) = default;
#endif

        bool operator==(const Request& other) const
        {
            return true
                && (keyword == other.keyword);
        }

        bool operator!=(const Request& other) const
        {
            return !(*this == other);
        }

        void swap(Request& other)
        {
            using std::swap;
            swap(keyword, other.keyword);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(Request& left, Request& right)
    {
        left.swap(right);
    }

    
    struct Response
    {
        std::set<std::string> matches;
        
        Response()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Response(const Response& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Response(Response&& other)
          : matches(std::move(other.matches))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Response& operator=(const Response& other) = default;
#endif

        bool operator==(const Response& other) const
        {
            return true
                && (matches == other.matches);
        }

        bool operator!=(const Response& other) const
        {
            return !(*this == other);
        }

        void swap(Response& other)
        {
            using std::swap;
            swap(matches, other.matches);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(Response& left, Response& right)
    {
        left.swap(right);
    }
} // namespace Message
