
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : bond_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "bond_reflection.h"
#include <bond/core/exception.h>

namespace bond
{
    
    const bond::Metadata SerializableExceptionBase::Schema::metadata
        = SerializableExceptionBase::Schema::GetMetadata();
    
    const bond::Metadata SerializableExceptionBase::Schema::s_message_metadata
        = bond::reflection::MetadataInit("message");

    
    const bond::Metadata Void::Schema::metadata
        = Void::Schema::GetMetadata();

    
    const bond::Metadata GUID::Schema::metadata
        = GUID::Schema::GetMetadata();
    
    const bond::Metadata GUID::Schema::s_Data1_metadata
        = bond::reflection::MetadataInit("Data1");
    
    const bond::Metadata GUID::Schema::s_Data2_metadata
        = bond::reflection::MetadataInit("Data2");
    
    const bond::Metadata GUID::Schema::s_Data3_metadata
        = bond::reflection::MetadataInit("Data3");
    
    const bond::Metadata GUID::Schema::s_Data4_metadata
        = bond::reflection::MetadataInit("Data4");

    
    namespace _bond_enumerators
    {
    namespace Modifier
    {
        const
        std::map<std::string, enum Modifier> _name_to_value_Modifier =
            boost::assign::map_list_of<std::string, enum Modifier>
                ("Optional", Optional)
                ("Required", Required)
                ("RequiredOptional", RequiredOptional);

        const
        std::map<enum Modifier, std::string> _value_to_name_Modifier =
            bond::reverse_map(_name_to_value_Modifier);

        const std::string& ToString(enum Modifier value)
        {
            std::map<enum Modifier, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "Modifier");

            return it->second;
        }

        void FromString(const std::string& name, enum Modifier& value)
        {
            std::map<std::string, enum Modifier>::const_iterator it =
                _name_to_value_Modifier.find(name);

            if (_name_to_value_Modifier.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "Modifier");

            value = it->second;
        }

    } // namespace Modifier
    } // namespace _bond_enumerators

    
    const bond::Metadata Variant::Schema::metadata
        = Variant::Schema::GetMetadata();
    
    const bond::Metadata Variant::Schema::s_uint_value_metadata
        = bond::reflection::MetadataInit("uint_value");
    
    const bond::Metadata Variant::Schema::s_int_value_metadata
        = bond::reflection::MetadataInit("int_value");
    
    const bond::Metadata Variant::Schema::s_double_value_metadata
        = bond::reflection::MetadataInit("double_value");
    
    const bond::Metadata Variant::Schema::s_string_value_metadata
        = bond::reflection::MetadataInit("string_value");
    
    const bond::Metadata Variant::Schema::s_wstring_value_metadata
        = bond::reflection::MetadataInit("wstring_value");
    
    const bond::Metadata Variant::Schema::s_nothing_metadata
        = bond::reflection::MetadataInit("nothing");

    
    const bond::Metadata Metadata::Schema::metadata
        = Metadata::Schema::GetMetadata();
    
    const bond::Metadata Metadata::Schema::s_name_metadata
        = bond::reflection::MetadataInit("name");
    
    const bond::Metadata Metadata::Schema::s_qualified_name_metadata
        = bond::reflection::MetadataInit("qualified_name");
    
    const bond::Metadata Metadata::Schema::s_attributes_metadata
        = bond::reflection::MetadataInit("attributes");
    
    const bond::Metadata Metadata::Schema::s_modifier_metadata
        = bond::reflection::MetadataInit(::bond::_bond_enumerators::Modifier::Optional, "modifier");
    
    const bond::Metadata Metadata::Schema::s_default_value_metadata
        = bond::reflection::MetadataInit("default_value");

    
    const bond::Metadata TypeDef::Schema::metadata
        = TypeDef::Schema::GetMetadata();
    
    const bond::Metadata TypeDef::Schema::s_id_metadata
        = bond::reflection::MetadataInit(::bond::_bond_enumerators::BondDataType::BT_STRUCT, "id");
    
    const bond::Metadata TypeDef::Schema::s_struct_def_metadata
        = bond::reflection::MetadataInit(static_cast<uint16_t>(0), "struct_def");
    
    const bond::Metadata TypeDef::Schema::s_element_metadata
        = bond::reflection::MetadataInit("element");
    
    const bond::Metadata TypeDef::Schema::s_key_metadata
        = bond::reflection::MetadataInit("key");
    
    const bond::Metadata TypeDef::Schema::s_bonded_type_metadata
        = bond::reflection::MetadataInit("bonded_type");

    
    const bond::Metadata FieldDef::Schema::metadata
        = FieldDef::Schema::GetMetadata();
    
    const bond::Metadata FieldDef::Schema::s_metadata_metadata
        = bond::reflection::MetadataInit("metadata");
    
    const bond::Metadata FieldDef::Schema::s_id_metadata
        = bond::reflection::MetadataInit("id");
    
    const bond::Metadata FieldDef::Schema::s_type_metadata
        = bond::reflection::MetadataInit("type");

    
    const bond::Metadata StructDef::Schema::metadata
        = StructDef::Schema::GetMetadata();
    
    const bond::Metadata StructDef::Schema::s_metadata_metadata
        = bond::reflection::MetadataInit("metadata");
    
    const bond::Metadata StructDef::Schema::s_base_def_metadata
        = bond::reflection::MetadataInit("base_def");
    
    const bond::Metadata StructDef::Schema::s_fields_metadata
        = bond::reflection::MetadataInit("fields");

    
    const bond::Metadata SchemaDef::Schema::metadata
        = SchemaDef::Schema::GetMetadata();
    
    const bond::Metadata SchemaDef::Schema::s_structs_metadata
        = bond::reflection::MetadataInit("structs");
    
    const bond::Metadata SchemaDef::Schema::s_root_metadata
        = bond::reflection::MetadataInit("root");

    
} // namespace bond
