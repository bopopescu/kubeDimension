// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#ifndef PROTOBUF_Messages_2eproto__INCLUDED
#define PROTOBUF_Messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Camera.pb.h"
#include "Imu.pb.h"
#include "Pose.pb.h"
#include "Encoder.pb.h"
#include "Lidar.pb.h"
// @@protoc_insertion_point(includes)

namespace hal {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Messages_2eproto();
void protobuf_AssignDesc_Messages_2eproto();
void protobuf_ShutdownFile_Messages_2eproto();

class Msg;

// ===================================================================

class Msg : public ::google::protobuf::Message {
 public:
  Msg();
  virtual ~Msg();

  Msg(const Msg& from);

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg& default_instance();

  void Swap(Msg* other);

  // implements Message ----------------------------------------------

  Msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline double timestamp() const;
  inline void set_timestamp(double value);

  // optional .hal.CameraMsg camera = 2;
  inline bool has_camera() const;
  inline void clear_camera();
  static const int kCameraFieldNumber = 2;
  inline const ::hal::CameraMsg& camera() const;
  inline ::hal::CameraMsg* mutable_camera();
  inline ::hal::CameraMsg* release_camera();
  inline void set_allocated_camera(::hal::CameraMsg* camera);

  // optional .hal.ImuMsg imu = 3;
  inline bool has_imu() const;
  inline void clear_imu();
  static const int kImuFieldNumber = 3;
  inline const ::hal::ImuMsg& imu() const;
  inline ::hal::ImuMsg* mutable_imu();
  inline ::hal::ImuMsg* release_imu();
  inline void set_allocated_imu(::hal::ImuMsg* imu);

  // optional .hal.PoseMsg pose = 4;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 4;
  inline const ::hal::PoseMsg& pose() const;
  inline ::hal::PoseMsg* mutable_pose();
  inline ::hal::PoseMsg* release_pose();
  inline void set_allocated_pose(::hal::PoseMsg* pose);

  // optional .hal.EncoderMsg encoder = 5;
  inline bool has_encoder() const;
  inline void clear_encoder();
  static const int kEncoderFieldNumber = 5;
  inline const ::hal::EncoderMsg& encoder() const;
  inline ::hal::EncoderMsg* mutable_encoder();
  inline ::hal::EncoderMsg* release_encoder();
  inline void set_allocated_encoder(::hal::EncoderMsg* encoder);

  // optional .hal.LidarMsg lidar = 6;
  inline bool has_lidar() const;
  inline void clear_lidar();
  static const int kLidarFieldNumber = 6;
  inline const ::hal::LidarMsg& lidar() const;
  inline ::hal::LidarMsg* mutable_lidar();
  inline ::hal::LidarMsg* release_lidar();
  inline void set_allocated_lidar(::hal::LidarMsg* lidar);

  // @@protoc_insertion_point(class_scope:hal.Msg)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_camera();
  inline void clear_has_camera();
  inline void set_has_imu();
  inline void clear_has_imu();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_encoder();
  inline void clear_has_encoder();
  inline void set_has_lidar();
  inline void clear_has_lidar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double timestamp_;
  ::hal::CameraMsg* camera_;
  ::hal::ImuMsg* imu_;
  ::hal::PoseMsg* pose_;
  ::hal::EncoderMsg* encoder_;
  ::hal::LidarMsg* lidar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Msg* default_instance_;
};
// ===================================================================


// ===================================================================

// Msg

// optional double timestamp = 1;
inline bool Msg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Msg::timestamp() const {
  return timestamp_;
}
inline void Msg::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .hal.CameraMsg camera = 2;
inline bool Msg::has_camera() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg::set_has_camera() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg::clear_has_camera() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg::clear_camera() {
  if (camera_ != NULL) camera_->::hal::CameraMsg::Clear();
  clear_has_camera();
}
inline const ::hal::CameraMsg& Msg::camera() const {
  return camera_ != NULL ? *camera_ : *default_instance_->camera_;
}
inline ::hal::CameraMsg* Msg::mutable_camera() {
  set_has_camera();
  if (camera_ == NULL) camera_ = new ::hal::CameraMsg;
  return camera_;
}
inline ::hal::CameraMsg* Msg::release_camera() {
  clear_has_camera();
  ::hal::CameraMsg* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline void Msg::set_allocated_camera(::hal::CameraMsg* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    set_has_camera();
  } else {
    clear_has_camera();
  }
}

// optional .hal.ImuMsg imu = 3;
inline bool Msg::has_imu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg::set_has_imu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg::clear_has_imu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg::clear_imu() {
  if (imu_ != NULL) imu_->::hal::ImuMsg::Clear();
  clear_has_imu();
}
inline const ::hal::ImuMsg& Msg::imu() const {
  return imu_ != NULL ? *imu_ : *default_instance_->imu_;
}
inline ::hal::ImuMsg* Msg::mutable_imu() {
  set_has_imu();
  if (imu_ == NULL) imu_ = new ::hal::ImuMsg;
  return imu_;
}
inline ::hal::ImuMsg* Msg::release_imu() {
  clear_has_imu();
  ::hal::ImuMsg* temp = imu_;
  imu_ = NULL;
  return temp;
}
inline void Msg::set_allocated_imu(::hal::ImuMsg* imu) {
  delete imu_;
  imu_ = imu;
  if (imu) {
    set_has_imu();
  } else {
    clear_has_imu();
  }
}

// optional .hal.PoseMsg pose = 4;
inline bool Msg::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg::set_has_pose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg::clear_has_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg::clear_pose() {
  if (pose_ != NULL) pose_->::hal::PoseMsg::Clear();
  clear_has_pose();
}
inline const ::hal::PoseMsg& Msg::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::hal::PoseMsg* Msg::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::hal::PoseMsg;
  return pose_;
}
inline ::hal::PoseMsg* Msg::release_pose() {
  clear_has_pose();
  ::hal::PoseMsg* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Msg::set_allocated_pose(::hal::PoseMsg* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
}

// optional .hal.EncoderMsg encoder = 5;
inline bool Msg::has_encoder() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg::set_has_encoder() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg::clear_has_encoder() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg::clear_encoder() {
  if (encoder_ != NULL) encoder_->::hal::EncoderMsg::Clear();
  clear_has_encoder();
}
inline const ::hal::EncoderMsg& Msg::encoder() const {
  return encoder_ != NULL ? *encoder_ : *default_instance_->encoder_;
}
inline ::hal::EncoderMsg* Msg::mutable_encoder() {
  set_has_encoder();
  if (encoder_ == NULL) encoder_ = new ::hal::EncoderMsg;
  return encoder_;
}
inline ::hal::EncoderMsg* Msg::release_encoder() {
  clear_has_encoder();
  ::hal::EncoderMsg* temp = encoder_;
  encoder_ = NULL;
  return temp;
}
inline void Msg::set_allocated_encoder(::hal::EncoderMsg* encoder) {
  delete encoder_;
  encoder_ = encoder;
  if (encoder) {
    set_has_encoder();
  } else {
    clear_has_encoder();
  }
}

// optional .hal.LidarMsg lidar = 6;
inline bool Msg::has_lidar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg::set_has_lidar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg::clear_has_lidar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg::clear_lidar() {
  if (lidar_ != NULL) lidar_->::hal::LidarMsg::Clear();
  clear_has_lidar();
}
inline const ::hal::LidarMsg& Msg::lidar() const {
  return lidar_ != NULL ? *lidar_ : *default_instance_->lidar_;
}
inline ::hal::LidarMsg* Msg::mutable_lidar() {
  set_has_lidar();
  if (lidar_ == NULL) lidar_ = new ::hal::LidarMsg;
  return lidar_;
}
inline ::hal::LidarMsg* Msg::release_lidar() {
  clear_has_lidar();
  ::hal::LidarMsg* temp = lidar_;
  lidar_ = NULL;
  return temp;
}
inline void Msg::set_allocated_lidar(::hal::LidarMsg* lidar) {
  delete lidar_;
  lidar_ = lidar;
  if (lidar) {
    set_has_lidar();
  } else {
    clear_has_lidar();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hal

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Messages_2eproto__INCLUDED
