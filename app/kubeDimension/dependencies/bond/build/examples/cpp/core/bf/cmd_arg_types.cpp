
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : cmd_arg_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "cmd_arg_reflection.h"
#include <bond/core/exception.h>

namespace bf
{
    
    namespace _bond_enumerators
    {
    namespace Protocol
    {
        const
        std::map<std::string, enum Protocol> _name_to_value_Protocol =
            boost::assign::map_list_of<std::string, enum Protocol>
                ("guess", guess)
                ("marshal", marshal)
                ("compact", compact)
                ("compact2", compact2)
                ("fast", fast)
                ("simple", simple)
                ("simple2", simple2)
                ("json", json);

        const
        std::map<enum Protocol, std::string> _value_to_name_Protocol =
            bond::reverse_map(_name_to_value_Protocol);

        const std::string& ToString(enum Protocol value)
        {
            std::map<enum Protocol, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "Protocol");

            return it->second;
        }

        void FromString(const std::string& name, enum Protocol& value)
        {
            std::map<std::string, enum Protocol>::const_iterator it =
                _name_to_value_Protocol.find(name);

            if (_name_to_value_Protocol.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "Protocol");

            value = it->second;
        }

    } // namespace Protocol
    } // namespace _bond_enumerators

    
    const bond::Metadata Options::Schema::metadata
        = Options::Schema::GetMetadata();
    
    const bond::Metadata Options::Schema::s_help_metadata
        = bond::reflection::MetadataInit("help", bond::reflection::optional_field_modifier::value,
            boost::assign::map_list_of<std::string, std::string>
                    ("help", "show this help text")
                    ("abbr", "?"));
    
    const bond::Metadata Options::Schema::s_output_metadata
        = bond::reflection::MetadataInit("stdout", "output", bond::reflection::optional_field_modifier::value,
            boost::assign::map_list_of<std::string, std::string>
                    ("abbr", "o")
                    ("help", "output file"));
    
    const bond::Metadata Options::Schema::s_from_metadata
        = bond::reflection::MetadataInit(::bf::_bond_enumerators::Protocol::guess, "from", bond::reflection::optional_field_modifier::value,
            boost::assign::map_list_of<std::string, std::string>
                    ("help", "guess | marshal | compact | compact2 | fast | simple | simple2"));
    
    const bond::Metadata Options::Schema::s_to_metadata
        = bond::reflection::MetadataInit(::bf::_bond_enumerators::Protocol::json, "to", bond::reflection::optional_field_modifier::value,
            boost::assign::map_list_of<std::string, std::string>
                    ("help", "json | compact | compact2 | fast | simple | simple2"));
    
    const bond::Metadata Options::Schema::s_all_fields_metadata
        = bond::reflection::MetadataInit("all_fields", bond::reflection::optional_field_modifier::value,
            boost::assign::map_list_of<std::string, std::string>
                    ("help", "include values for omitted optional fields when transcoding to json format with input schema)"));
    
    const bond::Metadata Options::Schema::s_schema_metadata
        = bond::reflection::MetadataInit("schema", bond::reflection::optional_field_modifier::value,
            boost::assign::map_list_of<std::string, std::string>
                    ("help", "file with marshaled schema of the input; required when input format is simple*"));
    
    const bond::Metadata Options::Schema::s_file_metadata
        = bond::reflection::MetadataInit("file", bond::reflection::required_field_modifier::value,
            boost::assign::map_list_of<std::string, std::string>
                    ("help", "input file")
                    ("naked", ""));

    
} // namespace bf
